<?php

use Drupal\block\Entity\Block;

/**
 * Add theme settings to the page body in preprocess_html
 */
function radicati_drupal_theme_preprocess_html(&$variables) {
  $header_type_class = 'radicati-header-type--' . theme_get_setting('radicati_theme_header_type');
  $footer_type_class = 'radicati-footer-type--' . theme_get_setting('radicati_theme_footer_type');
  $header_sticky_class = theme_get_setting('radicati_theme_header_sticky') ? 'radicati-header-sticky' : '';
  $footer_sticky_class = theme_get_setting('radicati_theme_footer_sticky') ? 'radicati-footer-sticky' : '';

  if($header_sticky_class) {
    $variables['page']['#attached']['library'][] = 'radicati_drupal_theme/sticky-header';
  }

  if($footer_sticky_class) {
    $variables['page']['#attached']['library'][] = 'radicati_drupal_theme/sticky-footer';
  }

  $variables['attributes']['class'][] = $header_type_class;
  $variables['attributes']['class'][] = $header_sticky_class;
  $variables['attributes']['class'][] = $footer_type_class;
  $variables['attributes']['class'][] = $footer_sticky_class;
}

/**
 * adds custom block type to the block template as a class name.
 */
function radicati_drupal_theme_preprocess_block(&$variables) {
  $block_content = $variables['elements']['content'];

  if(isset($variables['elements']['#attributes']['data-aos'])) {
    // Add the AOS library.
    $variables['#attached']['library'][] = 'radicati_drupal_theme/radicati-aos';
  }

  if(isset($block_content['#block_content'])) {
    $bundle = $block_content['#block_content']->bundle();
    $class = 'block--block-content--' . $bundle;
    // make sure $class is a clean class name
    $class = str_replace('_', '-', $class);
    $variables['attributes']['class'][] = $class;
  }

  if (isset($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if(!empty($block)) {
      $region = $block->getRegion();
      $variables['content']['#attributes']['region'] = $region;
    }
  }
}

/**
 * Alter paragraph items to include the AOS library if the paragraph
 * has the data-aos attribute.
 */
function radicati_drupal_theme_preprocess_paragraph(&$variables) {
  if(isset($variables['elements']['#attributes']['data-aos'])) {
    // Add the AOS library.
    $variables['#attached']['library'][] = 'radicati_drupal_theme/radicati-aos';
  }
}

/**
 * Adds a theme suggestions for menu to allow templating them based on what region
 * they are used in. So a menu in the off canvas can use the menu--off-canvas.html.twig file.
 */
function radicati_drupal_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $suggestions[] = 'menu__' . $variables['attributes']['region'];
    $suggestions[] = 'menu__' . $variables['attributes']['region'] . '__' . $variables['menu_name'];
  }
}

/**
 * Add theme suggestions for pages for each content type.
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 * @return void
 */
function radicati_drupal_theme_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
  if ($node = \Drupal::request()->attributes->get('node')) {
    $suggestions[] = 'page__node__' . $node->getType();
  }
}

function radicati_drupal_theme_theme_suggestions_block_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['elements']['content']['#block_content'])) {
    /** @var \Drupal\block_content\Entity\BlockContent $content */
    $content = $variables['elements']['content']['#block_content'];
    $view_mode = $variables['elements']['content']['#view_mode'];
    $bundle = $content->bundle();
    $suggestions[] = "block__block_content";
    $suggestions[] = "block__block_content__{$bundle}";
    $suggestions[] = "block__block_content__{$bundle}__{$view_mode}";
  }
}

function radicati_drupal_theme_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
}